module Log {
    import 0x0.Event;

    resource T {
        events: Event.Handle,
    }

    public log(msg: bytearray) acquires T {
        let t: Self.T;
        let t_ref: &mut Self.T;
        let sender: address;
        let handle: Event.Handle;
        let exist: bool;

        sender = get_txn_sender();
        exist = exists<T>(copy(sender));

        if (!copy(exist)) {
            handle = Event.new_event_handle();
            t = T { events: move(handle), };
            move_to_sender<T>(move(t));
        }

        t_ref = borrow_global<T>(copy(sender));
        Event.emit_event(&mut move(t_ref).events, move(msg));

        return;
    }
}